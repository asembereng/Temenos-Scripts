name: Playwright Tests

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  test:
    name: Run Playwright Tests
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        dotnet-version: ['8.0.x']
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ matrix.dotnet-version }}
        
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        
    - name: Cache NuGet packages
      uses: actions/cache@v3
      with:
        path: ~/.nuget/packages
        key: ${{ runner.os }}-nuget-${{ hashFiles('**/*.csproj') }}
        restore-keys: |
          ${{ runner.os }}-nuget-
          
    - name: Restore dependencies
      run: dotnet restore
      
    - name: Build solution
      run: dotnet build --configuration Release --no-restore
      
    - name: Install Playwright
      run: |
        npm install -g playwright
        npx playwright install --with-deps || echo "Browser installation failed, but tests will continue"
        
    - name: Run basic tests
      run: |
        dotnet test tests/TemenosAlertManager.Tests.Playwright/ \
          --filter "FullyQualifiedName~Basic" \
          --configuration Release \
          --verbosity normal \
          --logger "trx;LogFileName=basic-tests.trx"
          
    - name: Run API tests with coverage
      run: |
        dotnet test tests/TemenosAlertManager.Tests.Playwright/ \
          --filter "FullyQualifiedName~Api" \
          --configuration Release \
          --collect:"XPlat Code Coverage" \
          --verbosity normal \
          --logger "trx;LogFileName=api-tests.trx" \
          --results-directory ./TestResults
          
    - name: Run web interface tests
      continue-on-error: true
      run: |
        dotnet test tests/TemenosAlertManager.Tests.Playwright/ \
          --filter "FullyQualifiedName~Web" \
          --configuration Release \
          --verbosity normal \
          --logger "trx;LogFileName=web-tests.trx" \
          --results-directory ./TestResults
          
    - name: Generate coverage report
      run: |
        dotnet tool install -g dotnet-reportgenerator-globaltool
        reportgenerator \
          -reports:"./TestResults/**/coverage.cobertura.xml" \
          -targetdir:./coverage-report \
          -reporttypes:"Html;JsonSummary;Cobertura" \
          -verbosity:Warning || echo "Coverage report generation failed"
          
    - name: Upload test results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: test-results
        path: |
          ./TestResults/**/*.trx
          ./coverage-report/**/*
          
    - name: Upload coverage to Codecov
      if: success()
      uses: codecov/codecov-action@v3
      with:
        files: ./TestResults/**/coverage.cobertura.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false
        
    - name: Publish test results
      uses: dorny/test-reporter@v1
      if: always()
      with:
        name: Playwright Test Results
        path: './TestResults/**/*.trx'
        reporter: dotnet-trx
        
    - name: Comment coverage report
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v7
      with:
        script: |
          const fs = require('fs');
          const path = './coverage-report/Summary.json';
          
          if (fs.existsSync(path)) {
            const coverage = JSON.parse(fs.readFileSync(path, 'utf8'));
            const coveragePercent = coverage.summary.linecoverage;
            
            const comment = `## üìä Test Coverage Report
            
            **Line Coverage: ${coveragePercent}%**
            
            | Metric | Coverage |
            |--------|----------|
            | Lines | ${coverage.summary.linecoverage}% |
            | Branches | ${coverage.summary.branchcoverage}% |
            | Methods | ${coverage.summary.methodcoverage}% |
            
            üìÅ Full report available in the build artifacts.
            `;
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });
          }

  test-windows:
    name: Run Tests on Windows
    runs-on: windows-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: '8.0.x'
        
    - name: Restore dependencies
      run: dotnet restore
      
    - name: Build solution
      run: dotnet build --configuration Release --no-restore
      
    - name: Run basic tests
      run: |
        dotnet test tests/TemenosAlertManager.Tests.Playwright/ `
          --filter "FullyQualifiedName~Basic" `
          --configuration Release `
          --verbosity normal
          
    - name: Run PowerShell test script
      run: |
        ./scripts/run-tests.ps1 -SkipBrowserInstall -Configuration Release

  test-macos:
    name: Run Tests on macOS
    runs-on: macos-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: '8.0.x'
        
    - name: Restore dependencies
      run: dotnet restore
      
    - name: Build solution
      run: dotnet build --configuration Release --no-restore
      
    - name: Run basic tests
      run: |
        dotnet test tests/TemenosAlertManager.Tests.Playwright/ \
          --filter "FullyQualifiedName~Basic" \
          --configuration Release \
          --verbosity normal